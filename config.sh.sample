#
# CONFIGURATION
#

# Note: Only board_setup and SD_SIZE should
# be required for building a standard image,
# assuming /usr/src has suitable FreeBSD
# sources.  Everything else below is optional.

# REQUIRED:
# Uncomment one to choose the default configuration for your board
#
# board_setup BeagleBone
# board_setup RaspberryPi
# board_setup PandaBoard

#
# Read board/<board-name>/README for more details
# about configuring for your particular board.
#
# The variables documented below are just
# a few of the most common ones.
#

# REQUIRED: SD_SIZE
#
# Size of the disk image that will be built.
# This is usually the same size as your card,
# but it can be smaller.
#
# MB and GB are predefined for convenience here
#
# The sizes here are rounded down some to make
# sure they fit on a matching card.
#
# SD_SIZE=$((100 * MB)) # for kernel-only images
# SD_SIZE=$((1950 * MB)) # for 2 Gigabyte card
# SD_SIZE=$((3900 * MB)) # for 4 Gigabyte card
# SD_SIZE=$((7900 * MB)) # for 8 Gigabyte card
# SD_SIZE=$((15900 * MB)) # for 16 Gigabyte card
# SD_SIZE=$((31900 * MB)) # for 32 Gigabyte card

# The board_setup above picks a default KERNCONF
# but you can override it here.  (Overriding here
# won't impact the default IMG filename; you may
# want to change that below as well.)
#
# KERNCONF=MYCONF

# The script assumes you're running a pretty recent
# copy of FreeBSD-CURRENT and have FreeBSD-CURRENT
# source code available in /usr/src.

# FreeBSD source that will be used for kernel,
# world, and ubldr.
#
# If you are already running on a sufficiently
# recent FreeBSD-CURRENT, you can just use /usr/src here.
#
# FREEBSD_SRC=/usr/src

# If you aren't running FreeBSD-CURRENT or cannot
# update /usr/src, then uncomment the following.
#
# This directory doesn't need to exist yet.
# When you run the script, it will tell you how to get
# appropriate sources into this directory.
#
# FREEBSD_SRC=$TOPDIR/freebsd-src

# Directory to hold U-Boot source code.
# U-Boot is a popular bootloader used on many different
# boards.  This is ignored if the board configuration
# you're using doesn't use U-Boot.
#
# The U-Boot source is about 120MB. U-Boot will also be compiled
# in this directory, so you'll need about 150MB total space here.
#
# This directory doesn't need to exist yet.
# When you run the script, it will tell you how to get
# appropriate sources into this directory if you need them.
#
# UBOOT_SRC=$TOPDIR/u-boot

# Directory where build artifacts will go; this should be a
# directory with enough space for the final disk image.
#
# WORKDIR=$TOPDIR/work

# The name of the final disk image.
# This file will be as large as SD_SIZE above, so make
# sure it's located somewhere with enough space.
#
# IMG=${WORKDIR}/FreeBSD-${KERNCONF}.img

# Uncomment to suppress installworld.  This is
# useful when experimenting with boot and kernel
# startup, since it greatly speeds up the image
# generation.  Set SD_SIZE to 80 * MB or even smaller if
# you can:
#
# unset FREEBSD_INSTALL_WORLD

# Uncomment to suppress installkernel.  Not often useful.
#
# unset FREEBSD_INSTALL_KERNEL

# Uncomment to populate /usr/src with a copy
# of the sources the image was built with.
# You probably want at least a 4GB card.
# (Requires FREEBSD_INSTALL_WORLD.)
#
# INSTALL_USR_SRC=yes

# Uncomment to fetch a fresh /usr/ports tree and put
# it on the image.
# (Requires FREEBSD_INSTALL_WORLD.)
#
# INSTALL_USR_PORTS=yes

# Extra arguments for world.
#
# Passed to both buildworld and installworld.
# FREEBSD_WORLD_EXTRA_ARGS="DEBUG_FLAGS=-g"
# Passed to only one:
# FREEBSD_BUILDWORLD_EXTRA_ARGS="-DNOCLEAN"
# FREEBSD_INSTALLWORLD_EXTRA_ARGS=""

# Extra arguments for kernel.
#
# Passed to both buildkernel and installkernel.
# FREEBSD_KERNEL_EXTRA_ARGS=""
# Passed to only one:
# FREEBSD_BUILDKERNEL_EXTRA_ARGS="-DNOCLEAN"
# FREEBSD_INSTALLKERNEL_EXTRA_ARGS=""


# OVERLAY FILES
#
# Most customization simply consists of putting extra
# files onto the image.
#
# The contents of ${BOARDDIR}/overlay and ${WORKDIR}/overlay
# are copied over the image just before the generic
# customization hooks are run.  For example, you can
# put a custom passwd or fstab file into
# ${WORKDIR}/overlay/etc.  If this file needs to be
# built dynamically, you can build it here.


# GENERIC CUSTOMIZATION HOOKS
#
# You can do arbitrary configuration by redefining
# the following shell functions.
#
# Most boards set up two partitions:
#  * A boot partition (often FAT formatted)
#    holds the various boot loaders.  This
#    varies significantly by board.
#  * A FreeBSD partition holds the FreeBSD world
#    (and usually kernel).
#
# These are constructed one at a time:  The
# partition is created, mounted, files are copied
# onto it, then the partition is unmounted.
# The following shell functions are the very last
# thing run before the partition is unmounted,
# so you can effectively override or modify anything
# done by earlier system-building phases.
#
# WARNING:  Unlike some other system-building scripts,
# these do *not* run in a chroot or jail.  (It can't
# because we're cross-building.)  For example, if you
# want to add an account, be sure to refer
# to etc/passwd and not /etc/passwd!
#
# Some useful shell variables:
#   ${WORKDIR} is the full path to the 'work' directory
#       which you can use for intermediate files
#   ${BOARDDIR}
#   ${TOPDIR}
#
# The lib/*.sh files also define a number of functions
# that you may find useful here.
#
# # Runs after boot partition is built, just before it
# # is unmounted.
# # $1 is the full path to the mounted boot partition
# customize_boot_partition ( ) {
# }
#
# Note that the following runs even if FREEBSD_INSTALL_KERNEL
# and FREEBSD_INSTALL_WORLD are not enabled.
#
# # Runs after FreeBSD partition is built and populated,
# # just before it is unmounted.
# # $1 is the full path to the mounted boot partition
# customize_freebsd_partition ( ) {
# }

# TODO: Package installation.
# I would like to be able to just drop some packages
# in ${BOARDDIR}/packages and have the script install
# them.  The old pkg_add tool couldn't really do this;
# maybe pkgng can?

