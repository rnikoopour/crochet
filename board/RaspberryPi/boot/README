Overview of Raspberry PI boot Sequence for FreeBSD

There is an initial "Phase One" that is the same regardless
of what OS you are booting.  The following "Phase Two" varies
considerably.


PHASE ONE: Initialize the hardware
==================================

This first phase is common to any use of RaspberryPi, whether you're
booting Linux, FreeBSD, or any other software.  It loads a series of
proprietary closed-source boot loader files that initialize the
hardware and ultimately load and run some executable.

These initial bits are loaded from the first partition on the SD card.
That partition must be formatted as FAT16 or FAT32.

* At power on, the ARM core is off and the GPU is on.  SDRAM is disabled.

* GPU ROM code reads bootcode.bin from SD card and executes it on the GPU.

* bootcode.bin enables SDRAM and loads start.elf

  (Note:  bootcode.bin used to execute loader.bin and loader.bin then
  loaded start.elf.  This is no longer true since Oct 2012; loader.bin
  is gone and bootcode.bin now loads start.elf directly.)

* bootcode.bin executes start.elf on the GPU (start.elf is
  the "GPU firmware" that remains resident)

  Note: There are several versions of start.elf that partition memory
  differently between ARM and the GPU.  To configure this, you copy
  the appropriate version to the name start.elf.

* start.elf reads config.txt and uses it to configure the hardware.

* Optional: start.elf reads cmdline.txt with arguments for kernel.img

The next part depends on what OS you are loading.  In any
case, start.elf remains in place on the GPU.  Video drivers
in the OS talk to start.elf (they don't communicate directly
with the GPU).

Note:  The most recent boot files are available from
github.com/raspberrypi/firmware  (Warning:  git clone
of this project is very time-consuming!)


PHASE TWO for LINUX:
====================

If you're booting Linux, start.elf loads a file called
kernel.img containing the Linux kernel.


PHASE TWO for "bare-metal" programming:
=======================================

There are some examples of bare-metal RaspberryPi programming
at github.com/dwelch67/raspberrypi.

These use the same boot process as for Linux, but replace
kernel.img with simple freestanding executables.


PHASE TWO for FreeBSD with U-Boot and ubldr:
============================================

The config.txt file specifies "kernel=u-boot.bin", so
start.elf loads the u-boot.bin file:

* u-boot loads and initializes

* u-boot loads ubldr from the FAT partition.
  ubldr is a version of the FreeBSD standard loader(8) which
  uses the u-boot API to access the hardware.

* ubldr locates a UFS partition on the SD card.

* ubldr loads the FreeBSD kernel from UFS

* The FreeBSD kernel initializes and runs.



PHASE TWO for FreeBSD without ubldr:
====================================

It is possible to load the FreeBSD kernel directly from U-Boot or even
directly from start.elf.

Booting via U-Boot and ubldr provides support for debugging the early
kernel initialization, so seems to be preferred right now.

Once FreeBSD is more stable on RaspberryPi,
expect some changes here.
